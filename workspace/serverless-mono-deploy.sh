#!/bin/bash

# this is intended to operate on a lerna mono repo generated by zotoio/generator-mono-serverless

START=`date +%s`

echo "GTM_EVENT_ID=$GTM_EVENT_ID"
echo "SLS_AWS_STAGE=$SLS_AWS_STAGE"
echo "GIT_PUSH_BRANCHNAME=$GIT_PUSH_BRANCHNAME"
echo "GIT_PR_ID=$GIT_PR_ID"
echo "SLS_DEPLOY_MODE=$SLS_DEPLOY_MODE"
echo "SLS_APIGW_DOMAIN_SUFFIX=$SLS_APIGW_DOMAIN_SUFFIX"

OUTDIR="/usr/workspace/clone/output";

if [ -d /usr/workspace/clone ]; then
    rm -rf /usr/workspace/clone
fi

show_summary () {
    cat ${OUTDIR}/*-output.txt | grep 'POST\|GET' | \
        sed "s/\/${SLS_AWS_STAGE}\//\/${GIT_PUSH_BRANCHNAME}\//g" \
            > ${OUTDIR}/apigw-endpoints.txt

    if [ -f ${OUTDIR}/apigw-endpoints.txt ]; then
        echo "ApiGateway Endpoints:"
        if [ -n "$SLS_APIGW_DOMAIN_SUFFIX" ]; then
            cat ${OUTDIR}/apigw-endpoints.txt | \
                sed -r 's|(https?://)?([^\.]*)+([[^\.]]*)+([^\/]*)|\1\2.'"$SLS_APIGW_DOMAIN_SUFFIX"'|g'
        else
            cat ${OUTDIR}/apigw-endpoints.txt
        fi
    fi

    cat ${OUTDIR}/*-output.txt | grep 'Success\|FAILURE'
}

handle_error () {
    if ls ${OUTDIR}/*-error.txt 1> /dev/null 2>&1; then
        cat ${OUTDIR}/*-error.txt
    fi
    show_summary
    echo "$1"
    echo "AT LEAST ONE DEPLOYMENT FAILED"
    END=`date +%s`
    echo "Execution time was `expr $END - $START` seconds."
    exit 1
}

source ./clone.sh || handle_error "failed on git clone."

if [ -n "$GIT_PR_ID" ]; then
    source fetch-pullrequest.sh || handle_error "checkout failed for pull request #$GIT_PR_ID."
else
    if [ -n "$GIT_PUSH_BRANCHNAME" ]; then
        cd /usr/workspace/clone
        git checkout $GIT_PUSH_BRANCHNAME || handle_error "checkout failed for branch $GIT_PUSH_BRANCHNAME."
    fi
fi

cd /usr/workspace/
export BUILD_COMMAND=yarn
source ./deps.sh
source ./build.sh

if [[ "$SLS_AFFECTED_PACKAGES" == "" ]]; then
    echo "no package deploys directly required"
    echo "AT LEAST ONE PACKAGE DEPLOYMENT FAILED"
    END=`date +%s`
    echo "Execution time was `expr $END - $START` seconds."
    exit 1
fi

echo "OK. It looks like we need to deploy $SLS_AFFECTED_PACKAGES - let's go!"

export IFS=","
mkdir -p ${OUTDIR}

if [[ "$SLS_DEPLOY_MODE" = "sequential" ]]; then
    echo "Starting sequential deployment.."
    for PACKAGE in $SLS_AFFECTED_PACKAGES; do
        source ./serverless-deploy.sh ${PACKAGE}^${GTM_EVENT_ID}^${GIT_PUSH_BRANCHNAME}^${SLS_AWS_STAGE} \
            | tee /dev/null 2>&1
    done
    if ls ${OUTDIR}/*-error.txt 1> /dev/null 2>&1; then
        handle_error
    fi

else
    # default is to deploy function in parallel - up to 4 simultaneously
    echo "Starting parallel deployment.."
    for PACKAGE in ${SLS_AFFECTED_PACKAGES[*]}; do
        echo ${PACKAGE}^${GTM_EVENT_ID}^${GIT_PUSH_BRANCHNAME}^${SLS_AWS_STAGE};
    done | xargs -I{} --max-procs 4 ./serverless-deploy.sh {} || handle_error
fi

cat ${OUTDIR}/*-summary.txt

show_summary

echo "ALL DEPLOYS SUCCESSFUL"

# store output
if [[ "$S3_DEPENDENCY_BUCKET" != "" ]]; then
    echo ">>> packaging deployment output: ${GTM_EVENT_ID}-output.tar.gz from output dir.."
    tar -czf ${GTM_EVENT_ID}-output.tar.gz -C ${OUTDIR} .
    echo ">>> uploading output to s3://${S3_DEPENDENCY_BUCKET}/output/${GTM_EVENT_ID}-output.tar.gz"
    https_proxy=$AWS_S3_PROXY aws s3api put-object --bucket $S3_DEPENDENCY_BUCKET \
        --key output/${GTM_EVENT_ID}-output.tar.gz --body ${GTM_EVENT_ID}-output.tar.gz
fi

END=`date +%s`
echo "Execution time was `expr $END - $START` seconds."
